1. Difference between forEach and filter
   The main difference between forEach and filter is that forEach just loop over the array and executes the callback but filter executes the callback and check its return value.

Ex:     var sample = [1, 2, 3] // yeah same array
        var result = sample.filter(elem => elem !== 2)
        /* output */
        [1, 3]

2.  Map:
    Map like filter & foreach takes a callback and run it against every element on the array but whats makes it unique is it generate a new array based on your existing array.
Ex:     let mapped = sample.map(elem => elem * 10)
        console.log(mapped);
        /* output */
        [10, 20, 30]
3. Reduce:
    Reduce method of the array object is used to reduce the array to one single value.

  Ex: var sum = sample.reduce((sum, elem) => sum + elem)
      console.log(sum);
      /* output */
      6

4. Array.From
The Array.from() method creates a new, shallow-copied Array instance from an array-like or iterable object.

console.log(Array.from('foo'));
// expected output: Array ["f", "o", "o"]

console.log(Array.from([1, 2, 3], x => x + x));
// expected output: Array [2, 4, 6]

5. Array splice
The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements.
Ex: var months = ['Jan', 'March', 'April', 'June'];
    months.splice(1, 0, 'Feb');
    // inserts at 1st index position
    console.log(months);
    // expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']

    months.splice(4, 1, 'May');
    // replaces 1 element at 4th index
    console.log(months);
    // expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']

6.  The arrow function that ES6 introduced has the lexical scope built in.
  ES6 introduced a better way to access these remaining unknown parameters using rest.
  “Rest,” as in “give me the rest of the parameters.” Rest parameters are indicated with three dots ( … ) and they can appear only at the end of the argument list. For example:

    function showContact (firstName, lastName, ...titles)  {
      console.log(firstName + ' ' + lastName + ', ' + titles[0] + ' and ' + titles[1]);
    }
    showContact('Sue', 'Johnson', 'Developer', 'Architect');

7. The three dots ( … ) operator has two uses. As the rest operator,
  it is used to gather up all the remaining arguments into an array.
  But as the spread operator, it is used to expand a single variable into an array.
  In both cases, it is working with arrays. It is just either expanding or collapsing that array.

8. Instantiating and using methods from the class works exactly the same as it did for constructor functions.
  Well, kind of. Using the new keyword was optional for ES5 constructor functions, but now is required.
  If you try to leave off the newkeyword when working with classes, a TypeError will be thrown.
  Another difference is that function declarations can be hoisted.
  In other words, you can call a function that has yet to be declared.
  Classes do not allow this sort of thing. A class can only be accessed after its definition is evaluated.


9. The most important thing to remember is that even though ES6 classes look like traditional object-oriented classes, they are not.
    Even with the new class keyword, they are still based on JavaScript’s prototypal inheritance.

10. Modules always execute in strict mode, which means that variables need to be declared.
    They only get executed once, which is right when they are loaded.
    Import statements get hoisted, which means that all dependencies will execute right when the module is loaded.
    A callback is just a function that executes after another function has finished executing. For example, if you were to run the following code and then look at the console, you would see the message, "1st Call".

      function doSomething(msg, callback){
          setTimeout(
            function () {
              console.log(msg);
              callback();
            },
            1000);
            }
            doSomething("1st call", function() {});

11. A promise is just a promise to return something at a later time.
    Either the thing you wanted is returned, or an error.
    ES6 introduced promises natively to JavaScript in the form of a Promise object.
    Promises in ES6 are based on the Promises/A+ open standard and offer many advantages to traditional callback functions.
    The most important advantage is how easy it is to chain asynchronous functions together.
